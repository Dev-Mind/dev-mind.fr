:doctitle: Spring security
:description: Comment construire le blog parfait
:keywords: Web, Blog, Asciidoc, Asciidoctor, CMS, Clever Cloud
:author: Guillaume EHRET - Dev-Mind
:revdate: 2018-01-02
:category: Web
:teaser: Début 2017, j'ai choisi de migrer mon blog de Blogspot vers une solution personnalisée à base de Asciidoc. J'ai continué à faire évoluer mon site web pour enfin arriver à une solution qui me satisfait.
:imgteaser: ../../img/blog/2018/siteweb_00.jpg
:status: draft

De tous les projets Spring, je dois dire que Spring Security est celui que j'apprécie le moins, car je l'ai toujours trouvé très compliqué et lourd à mettre en place.  Jumelé Spring Security à différents intermédiaires Oauth 2 relevait du sport neuronal. En gros, très loin de la simplicité proposée par Spring pour le reste des développements Java. Mais il faut reconnaître que vouloir proposer une abstraction pour toutes les solutions possibles n'est pas simple.

J'ai donc pendant très longtemps paramétré moi même la sécurité de mes applications. La sécurité est un sujet sensible et il est toujours mieux de comprendre ce qu'il se passe dans son application. Le faire soit même, a cet avantage, mais la sécurité est un métier, et vous pouvez aussi sensibiliser votre application si vous ne respectez pas certaines règles.

Un gros travail a été fait dans Spring Security 5 pour combler les manques fonctionnels au niveau de Oauth 2, et au niveau de Spring Boot pour faciliter la configuration. Pour aider les développeurs, Spring avait aussi mis à dispostion de https://github.com/spring-projects/spring-boot/tree/v2.0.0.M7/spring-boot-samples/[nombreux exemples de configuration sous Github] (L'URL pointe vers le tag v2.0.0.M7 version utilisée pour écrire cet article)

N'ayant plus d'excuse pour ne plus l'utiliser nous allons voir ensemble comment mettre en place un use case courant dans une application moderne: jumeler une authentification interne et une authentification Oauth2 via Google+, Facebook et Github.


https://github.com/spring-projects/spring-security/tree/5.0.0.RELEASE/samples/boot/oauth2login

Google +
https://console.developers.google.com

CSRF attack prevention
Session Fixation protection
Security Header integration

HTTP Strict Transport Security for secure requests
X-Content-Type-Options integration
Cache Control (can be overridden later by your application to allow caching of your static resources)
X-XSS-Protection integration
X-Frame-Options integration to help prevent Clickjackin


https://github.com/settings/applications/new